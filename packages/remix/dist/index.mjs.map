{"version":3,"sources":["../src/bindings.tsx","../src/params-from-current-path/index.ts","../src/convert-to-number-if-possible.ts","../src/refine-routes.tsx","../src/unsaved-changes-notifier.tsx","../src/navigate-to-resource.ts","../src/parse-table-params.ts"],"sourcesContent":["import {\n  GoConfig,\n  RouterBindings,\n  ResourceContext,\n  matchResourceFromRoute,\n  ParseResponse,\n} from \"@refinedev/core\";\nimport { useParams, useLocation, useNavigate, Link } from \"@remix-run/react\";\nimport { parse, stringify } from \"qs\";\nimport React, { ComponentProps, useCallback, useContext } from \"react\";\nimport { paramsFromCurrentPath } from \"./params-from-current-path\";\nimport { convertToNumberIfPossible } from \"./convert-to-number-if-possible\";\n\nexport const stringifyConfig = {\n  addQueryPrefix: true,\n  skipNulls: true,\n  arrayFormat: \"indices\" as const,\n  encode: false,\n  encodeValuesOnly: true,\n};\n\nexport const routerBindings: RouterBindings = {\n  go: () => {\n    const { search: existingSearch, hash: existingHash } = useLocation();\n    const navigate = useNavigate();\n\n    const fn = useCallback(\n      ({\n        to,\n        type,\n        query,\n        hash,\n        options: { keepQuery, keepHash } = {},\n      }: GoConfig) => {\n        /** Construct query params */\n        const urlQuery = {\n          ...(keepQuery &&\n            existingSearch &&\n            parse(existingSearch, { ignoreQueryPrefix: true })),\n          ...query,\n        };\n\n        if (urlQuery.to) {\n          urlQuery.to = encodeURIComponent(`${urlQuery.to}`);\n        }\n\n        const hasUrlQuery = Object.keys(urlQuery).length > 0;\n\n        /** Get hash */\n        const urlHash = `#${(hash || (keepHash && existingHash) || \"\").replace(\n          /^#/,\n          \"\",\n        )}`;\n\n        const hasUrlHash = urlHash.length > 1;\n\n        const urlTo = to || \"\";\n\n        const fullPath = `${urlTo}${\n          hasUrlQuery ? stringify(urlQuery, stringifyConfig) : \"\"\n        }${hasUrlHash ? urlHash : \"\"}`;\n\n        if (type === \"path\") {\n          return fullPath;\n        }\n\n        /** Navigate to the url */\n        return navigate(fullPath, {\n          replace: type === \"replace\",\n        });\n      },\n      [existingHash, existingSearch, navigate],\n    );\n\n    return fn;\n  },\n  back: () => {\n    const navigate = useNavigate();\n\n    return () => {\n      navigate(-1);\n    };\n  },\n  parse: () => {\n    const params = useParams();\n    const { pathname, search } = useLocation();\n    const { resources } = useContext(ResourceContext);\n\n    const { resource, action, matchedRoute } = React.useMemo(() => {\n      return matchResourceFromRoute(pathname, resources);\n    }, [resources, pathname]);\n\n    const inferredParams =\n      matchedRoute && pathname\n        ? paramsFromCurrentPath(pathname, matchedRoute)\n        : {};\n\n    const inferredId = inferredParams.id;\n\n    const fn = useCallback(() => {\n      const parsedSearch = parse(search, { ignoreQueryPrefix: true });\n\n      const combinedParams = {\n        ...inferredParams,\n        ...params,\n        ...parsedSearch,\n      };\n\n      const response: ParseResponse = {\n        ...(resource && { resource }),\n        ...(action && { action }),\n        ...(inferredId && { id: decodeURIComponent(inferredId) }),\n        ...(params?.id && { id: decodeURIComponent(params.id) }),\n        // ...(params?.action && { action: params.action }), // lets see if there is a need for this\n        pathname,\n        params: {\n          ...combinedParams,\n          current: convertToNumberIfPossible(\n            combinedParams.current as string,\n          ) as number | undefined,\n          pageSize: convertToNumberIfPossible(\n            combinedParams.pageSize as string,\n          ) as number | undefined,\n          to: combinedParams.to\n            ? decodeURIComponent(combinedParams.to as string)\n            : undefined,\n        },\n      };\n\n      return response;\n    }, [\n      pathname,\n      search,\n      params,\n      resource,\n      action,\n      inferredParams,\n      inferredId,\n    ]);\n\n    return fn;\n  },\n  Link: React.forwardRef<\n    HTMLAnchorElement,\n    ComponentProps<NonNullable<RouterBindings[\"Link\"]>>\n  >(function RefineLink(props, ref) {\n    return <Link {...props} ref={ref} />;\n  }),\n};\n","export const paramsFromCurrentPath = (\n  pathname: string,\n  matchingRoute: string,\n) => {\n  const params: Record<string, string> = {};\n\n  // remove leading and trailing slashes\n  const sanitizedMatchingRoute = matchingRoute.replace(/^\\/|\\/$/g, \"\");\n  const sanitizedPathname = pathname.replace(/^\\/|\\/$/g, \"\");\n\n  const matchingRouteParts = sanitizedMatchingRoute.split(\"/\");\n  const pathnameParts = sanitizedPathname.split(\"/\");\n\n  matchingRouteParts.forEach((part, index) => {\n    if (part.startsWith(\":\")) {\n      if (pathnameParts[index]?.length > 0) {\n        params[part.replace(\":\", \"\")] = pathnameParts[index];\n      }\n    }\n  });\n\n  return params;\n};\n","export const convertToNumberIfPossible = (value: string | undefined) => {\n  if (typeof value === \"undefined\") {\n    return value;\n  }\n  const num = Number(value);\n  if (`${num}` === value) {\n    return num;\n  }\n  return value;\n};\n","import React from \"react\";\nimport { useLocation } from \"@remix-run/react\";\nimport { useResource } from \"@refinedev/core\";\n\ntype RefineRoutesProps = {\n  children?: (\n    renderedRoute: JSX.Element | undefined,\n    pathname: string | undefined,\n  ) => JSX.Element;\n};\n\nexport const RefineRoutes = ({ children }: RefineRoutesProps) => {\n  const { resource, action } = useResource();\n  const { pathname } = useLocation();\n\n  const resourceAction = resource && action ? resource[action] : undefined;\n\n  const ResourceActionComponent =\n    typeof resourceAction === \"function\"\n      ? resourceAction\n      : typeof resourceAction === \"object\"\n        ? resourceAction.component\n        : undefined;\n\n  return (\n    <>\n      {children ? (\n        children(\n          ResourceActionComponent ? <ResourceActionComponent /> : undefined,\n          pathname ?? undefined,\n        )\n      ) : ResourceActionComponent ? (\n        <ResourceActionComponent />\n      ) : undefined}\n    </>\n  );\n};\n","import React from \"react\";\nimport { useTranslate, useWarnAboutChange } from \"@refinedev/core\";\nimport { useBlocker } from \"@remix-run/react\";\n\ntype UnsavedChangesNotifierProps = {\n  translationKey?: string;\n  message?: string;\n};\n\nexport const UnsavedChangesNotifier: React.FC<UnsavedChangesNotifierProps> = ({\n  translationKey = \"warnWhenUnsavedChanges\",\n  message = \"Are you sure you want to leave? You have unsaved changes.\",\n}) => {\n  const translate = useTranslate();\n  const { warnWhen, setWarnWhen } = useWarnAboutChange();\n\n  const warnMessage = React.useMemo(() => {\n    return translate(translationKey, message);\n  }, [translationKey, message, translate]);\n\n  const warnWhenListener = React.useCallback(\n    (e: { preventDefault: () => void; returnValue: string }) => {\n      e.preventDefault();\n\n      e.returnValue = warnMessage;\n\n      return e.returnValue;\n    },\n    [warnMessage],\n  );\n\n  React.useEffect(() => {\n    if (warnWhen) {\n      window.addEventListener(\"beforeunload\", warnWhenListener);\n    }\n\n    return window.removeEventListener(\"beforeunload\", warnWhenListener);\n  }, [warnWhen, warnWhenListener]);\n\n  const blocker = React.useCallback(() => {\n    if (warnWhen) {\n      if (window.confirm(warnMessage)) {\n        setWarnWhen?.(false);\n        return false;\n      }\n      return true;\n    }\n    return false;\n  }, [warnWhen, warnMessage, setWarnWhen]);\n\n  useBlocker(blocker);\n\n  return null;\n};\n","import { useResource, useGetToPath } from \"@refinedev/core\";\nimport React, { PropsWithChildren } from \"react\";\nimport { useNavigate } from \"@remix-run/react\";\n\ntype NavigateToResourceProps = PropsWithChildren<{\n  resource?: string;\n  meta?: Record<string, unknown>;\n}>;\n\nexport const NavigateToResource: React.FC<NavigateToResourceProps> = ({\n  resource: resourceProp,\n  meta,\n}) => {\n  const ran = React.useRef(false);\n  const navigate = useNavigate();\n  const getToPath = useGetToPath();\n  const { resource, resources } = useResource(resourceProp);\n\n  const toResource = resource || resources.find((r) => r.list);\n\n  React.useEffect(() => {\n    if (toResource) {\n      if (!ran.current) {\n        const path = getToPath({\n          resource: toResource,\n          action: \"list\",\n          meta,\n        });\n\n        if (path) {\n          navigate(path, { replace: true });\n        }\n        ran.current = true;\n      }\n    }\n  }, [toResource, meta, navigate, getToPath]);\n\n  return null;\n};\n","import { parse } from \"qs\";\nimport type { ParsedParams } from \"@refinedev/core\";\n\nexport const parseTableParams = (search: string) => {\n  const parsed: ParsedParams = parse(search, { ignoreQueryPrefix: true });\n\n  const tableReady = {\n    ...parsed,\n    pagination: {\n      current: parsed.current,\n      pageSize: parsed.pageSize,\n    },\n  };\n\n  delete tableReady.current;\n  delete tableReady.pageSize;\n\n  return tableReady;\n};\n"],"mappings":"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","names":["React","useLocation","React","useResource","React","useNavigate","parse"]}